---
- name: Synapse checks
  block:

    - name: Check Debian version
      ansible.builtin.assert:
        that:
          - ansible_distribution == "Debian"
          - ansible_distribution_release is ansible.builtin.regex('^bullseye|bookworm$')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that matrix-synapse is available when debian is specified as the install source
      block:

        - name: Use apt-cache policy matrix-synapse to check if synapse is availabe
          ansible.builtin.command: apt-cache policy matrix-synapse
          check_mode: false
          changed_when: false
          register: synapse_debian_apt_cache_policy_synapse

        - name: Fail if matrix-synapse is unavailable on Debian Bullseye
          ansible.builtin.assert:
            that:
              - ( "buster-backports" in synapse_debian_apt_cache_policy_synapse,stdout )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ansible_distribution_release == "bullseye"

      when: synapse_source == "debian"

    - name: Stat the TLS certificate path
      ansible.builtin.stat:
        path: "{{ synapse_tls_certificate_path }}"
      register: synapse_cert

    - name: Debug synapse_cert
      ansible.builtin.debug:
        var: synapse_cert
        verbosity: 2

    - name: Stat the TLS key path
      ansible.builtin.stat:
        path: "{{ synapse_tls_private_key_path }}"
      register: synapse_key

    - name: Debug synapse_key
      ansible.builtin.debug:
        var: synapse_key
        verbosity: 2

    - name: Check the cert when it is present
      block:

            - name: Read TLS cert information
              community.crypto.x509_certificate_info:
                path: "{{ synapse_tls_certificate_path }}"
                valid_at:
                  tomorrow: "+1d"
              register: synapse_cert_info

            - name: Debug cert info
              ansible.builtin.debug:
                var: synapse_cert_info
                verbosity: 3

      when: synapse_cert.stat.exists | bool

    - name: Check if the conf.d/database.yaml file is present
      ansible.builtin.stat:
        path: /etc/matrix-synapse/conf.d/database.yml
      register: synapse_etc_database_yaml

    - name: Check the conf.d/database.yaml config when existing
      block:

        - name: Slurp the conf.d/database.yaml file
          ansible.builtin.slurp:
            path: /etc/matrix-synapse/conf.d/database.yaml
          register: synapse_database_b64encoded
          no_log: true

        - name: Decode the base64 encoded version of homeserver.yaml and set a variable
          ansible.builtin.set_fact:
            synapse_database_existing_config: "{{ synapse_homeserver_b64encoded['content'] | b64decode | from_yaml }}"
          no_log: true

        - name: Debug /etc/matrix-synapse/conf.d/database.yaml content
          ansible.builtin.debug:
            var: synapse_database_existing_config
            verbosity: 3

      when: synapse_etc_database_yaml.stat.exists | bool

    - name: Check if the homeserver.yml file is present
      ansible.builtin.stat:
        path: /etc/matrix-synapse/homeserver.yaml
      register: synapse_etc_homeserver_yaml

    - name: Check the homeserver.yml config when existing
      block:

        - name: Slurp the homeserver.yaml file
          ansible.builtin.slurp:
            path: /etc/matrix-synapse/homeserver.yaml
          register: synapse_homeserver_b64encoded

        - name: Decode the base64 encoded version of homeserver.yaml and set a variable
          ansible.builtin.set_fact:
            synapse_homeserver_existing: "{{ synapse_homeserver_b64encoded['content'] | b64decode }}"
            synapse_homeserver_existing_config: "{{ synapse_homeserver_b64encoded['content'] | b64decode | from_yaml }}"
            synapse_homeserver_existing_config_lines: "{{ synapse_homeserver_b64encoded['content'] | b64decode | ansible.builtin.split('\n') }}"

        - name: Debug /etc/matrix-synapse/homeserver.yaml content
          ansible.builtin.debug:
            var: synapse_homeserver_existing
            verbosity: 3

        - name: Debug /etc/matrix-synapse/homeserver.yaml YAML
          ansible.builtin.debug:
            var: synapse_homeserver_existing_config
            verbosity: 2

        - name: Debug /etc/matrix-synapse/homeserver.yaml lines
          ansible.builtin.debug:
            var: synapse_homeserver_existing_config_lines
            verbosity: 3

        - name: Debug /etc/matrix-synapse/homeserver.yaml first line
          ansible.builtin.debug:
            var: synapse_homeserver_existing_config_lines[0]
            verbosity: 2

        - name: Debug synapse_homeserver dictionary
          ansible.builtin.debug:
            var: synapse_homeserver
            verbosity: 2

        - name: Stat the original backup of /etc/matrix-synapse/homeserver.yaml
          ansible.builtin.stat:
            path: "{{ synapse_homeserver_backup }}"
          register: synapse_homeserver_backup_check

      when: synapse_etc_homeserver_yaml.stat.exists | bool

  tags:
    - synapse
    - synapse_checks
    - synapse_config
...
